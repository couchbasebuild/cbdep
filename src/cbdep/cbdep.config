---
# YAML anchor for the repeated PHP packages
x-php-variant: &php-variant
  - if_platform: [linux]
    if_arch: [x86_64, x64-musl]
    base_url: https://packages.couchbase.com/couchbase-server/deps/php
    actions:
      - url: ${BASE_URL}/${VERSION}/${PACKAGE}-${PLATFORM}-${ARCH}-${VERSION}.tgz
      - install_dir: /tmp/php
      - unarchive:
          toplevel_dir: ${PACKAGE}-${VERSION}

  - if_platform: [windows]
    base_url: https://packages.couchbase.com/couchbase-server/deps/php
    actions:
      - url: ${BASE_URL}/${VERSION}/${PACKAGE}-${PLATFORM}-amd64-${VERSION}.tgz
      - install_dir: C:\php
      - unarchive:
          toplevel_dir: ${PACKAGE}-${VERSION}

packages:
  java:
    - if_platform: [linux, windows, macosx]
      if_version: ">= 8, < 9"
      actions:
        - url: https://downloads.build.couchbase.com/jdk/jdk-${VERSION}-${PLATFORM}-x64.tar.gz
        - unarchive:
            toplevel_dir: jdk1.${VERSION_MAJOR}.0_${VERSION_MINOR}

    - if_platform: [linux, windows]
      if_version: ">= 11"
      actions:
        - url: https://downloads.build.couchbase.com/jdk/jdk-${VERSION}_${PLATFORM}-x64_bin.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk-${VERSION}

    - if_platform: [osx]
      if_version: ">= 11"
      actions:
        - url: https://downloads.build.couchbase.com/jdk/jdk-${VERSION}_${PLATFORM}-x64_bin.tar.gz
        - unarchive:
            toplevel_dir: jdk-${VERSION}.jdk/Contents/Home

  openjdk-ea:
    - if_platform: [linux, windows, osx]
      actions:
        - url: https://download.java.net/java/early_access/jdk${VERSION_MAJOR}/${VERSION_BUILD}/GPL/openjdk-${VERSION_MAJOR}-ea+${VERSION_BUILD}_${PLATFORM}-x64_bin.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJOR}

  openjdk:

    # Linux and Windows

    - if_platform: [linux, windows]
      if_arch: [ x64 ]
      if_version: ">= 8, < 9"
      actions:
        - url: https://github.com/AdoptOpenJDK/openjdk${VERSION_MAJOR}-binaries/releases/download/jdk${VERSION_MAJOR}u${VERSION_MINOR}-b${VERSION_BUILD}/OpenJDK${VERSION_MAJOR}U-jdk_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJOR}u${VERSION_MINOR}b${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk${VERSION_MAJOR}u${VERSION_MINOR}-b${VERSION_BUILD}

    - if_platform: [linux, windows]
      if_version: ">= 9, < 11.0.12"
      if_arch: [ x64, aarch64 ]
      actions:
        - url: https://github.com/AdoptOpenJDK/openjdk${VERSION_MAJOR}-binaries/releases/download/jdk-${VERSION}/OpenJDK${VERSION_MAJOR}U-jdk_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJORMINORPATCH}_${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJORMINORPATCH}+${VERSION_BUILD}

    - if_platform: [linux, windows]
      if_version: ">= 11.0.12"
      if_arch: [ x64, aarch64 ]
      actions:
        - url: https://github.com/adoptium/temurin${VERSION_MAJOR}-binaries/releases/download/jdk-${VERSION}/OpenJDK${VERSION_MAJOR}U-jdk_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJORMINORPATCH}_${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJORMINORPATCH}+${VERSION_BUILD}

    - if_platform: [linux]
      if_arch: [x64-musl]
      if_version: ">= 8, < 9"
      actions:
        - url: https://download.bell-sw.com/java/${VERSION}/bellsoft-jdk${VERSION}-${PLATFORM}-${ARCH}.tar.gz
        - unarchive:
            toplevel_dir: jdk${VERSION_MAJOR}u${VERSION_MINOR}

    - if_platform: [linux]
      if_arch: [x64-musl]
      if_version: ">= 9"
      actions:
        - url: https://download.bell-sw.com/java/${VERSION}/bellsoft-jdk${VERSION}-${PLATFORM}-${ARCH}.tar.gz
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJORMINORPATCH}

    # MacOS

    # Starting with 17.0.9, we use Temurin for everything.
    - if_platform: [mac]
      if_arch: [ x64, aarch64 ]
      if_version: ">= 17.0.9"
      actions:
        - url: https://github.com/adoptium/temurin${VERSION_MAJOR}-binaries/releases/download/jdk-${VERSION}/OpenJDK${VERSION_MAJOR}U-jdk_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJORMINORPATCH}_${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJORMINORPATCH}+${VERSION_BUILD}/Contents/Home

    # Starting with 11.0.12, we use Temurin for x64 only (for aarch64 see below).
    - if_platform: [mac]
      if_arch: [ x64 ]
      if_version: ">= 11.0.12, < 17.0.9"
      actions:
        - url: https://github.com/adoptium/temurin${VERSION_MAJOR}-binaries/releases/download/jdk-${VERSION}/OpenJDK${VERSION_MAJOR}U-jdk_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJORMINORPATCH}_${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJORMINORPATCH}+${VERSION_BUILD}/Contents/Home

    # Prior to 11.0.12, we used AdoptOpenJDK for x64 - they had slightly different packaging for JDK 8 and JDK 9+.
    - if_platform: [mac]
      if_arch: [ x64 ]
      if_version: ">= 9, < 11.0.12"
      actions:
        - url: https://github.com/AdoptOpenJDK/openjdk${VERSION_MAJOR}-binaries/releases/download/jdk-${VERSION}/OpenJDK${VERSION_MAJOR}U-jdk_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJORMINORPATCH}_${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJORMINORPATCH}+${VERSION_BUILD}/Contents/Home

    - if_platform: [mac]
      if_arch: [ x64 ]
      if_version: ">= 8, < 9"
      actions:
        - url: https://github.com/AdoptOpenJDK/openjdk${VERSION_MAJOR}-binaries/releases/download/jdk${VERSION_MAJOR}u${VERSION_MINOR}-b${VERSION_BUILD}/OpenJDK${VERSION_MAJOR}U-jdk_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJOR}u${VERSION_MINOR}b${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk${VERSION_MAJOR}u${VERSION_MINOR}-b${VERSION_BUILD}/Contents/Home

    # Prior to 17.0.9, we used bellsoft's packaging for aarch64 since originally
    # Temurin didn't include that platform. Again, the packaging is slightly different
    # for JDK 8 and JDK 9+
    - if_platform: [mac]
      if_arch: [ aarch64 ]
      if_verson: ">= 9, < 17.0.9"
      actions:
        - url: https://download.bell-sw.com/java/${VERSION}/bellsoft-jdk${VERSION}-macos-${ARCH}.zip
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJORMINORPATCH}.jdk

    - if_platform: [mac]
      if_arch: [ aarch64 ]
      if_version: ">= 8, < 9"
      actions:
        - url: https://download.bell-sw.com/java/${VERSION}/bellsoft-jdk${VERSION}-macos-${ARCH}.zip
        - unarchive:
            toplevel_dir: jdk${VERSION_MAJOR}u${VERSION_MINOR}.jdk

  liberica:
    # Bellsoft has blessedly consistent package names!
    - if_platform: [linux, macos, windows]
      if_arch: [amd64, aarch64]
      if_version: ">= 8"
      actions:
        - url: https://download.bell-sw.com/java/${VERSION}/bellsoft-jdk${VERSION}-${PLATFORM}-${ARCH}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJORMINORPATCH}

  openjdk-jre:
    - if_platform: [linux, windows]
      if_arch: [ x64, aarch64 ]
      if_version: ">= 9"
      actions:
        - url: https://github.com/AdoptOpenJDK/openjdk${VERSION_MAJOR}-binaries/releases/download/jdk-${VERSION}/OpenJDK${VERSION_MAJOR}U-jre_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJORMINORPATCH}_${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJORMINORPATCH}+${VERSION_BUILD}-jre

    - if_platform: [mac]
      if_arch: [ x64 ]
      if_version: ">= 9"
      actions:
        - url: https://github.com/AdoptOpenJDK/openjdk${VERSION_MAJOR}-binaries/releases/download/jdk-${VERSION}/OpenJDK${VERSION_MAJOR}U-jre_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJORMINORPATCH}_${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk-${VERSION_MAJORMINORPATCH}+${VERSION_BUILD}-jre/Contents/Home

    - if_platform: [linux, windows]
      if_arch: [ x64 ]
      if_version: ">= 8, < 9"
      actions:
        - url: https://github.com/AdoptOpenJDK/openjdk${VERSION_MAJOR}-binaries/releases/download/jdk${VERSION_MAJOR}u${VERSION_MINOR}-b${VERSION_BUILD}/OpenJDK${VERSION_MAJOR}U-jre_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJOR}u${VERSION_MINOR}b${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk${VERSION_MAJOR}u${VERSION_MINOR}-b${VERSION_BUILD}-jre

    - if_platform: [mac]
      if_arch: [ x64 ]
      if_version: ">= 8, < 9"
      actions:
        - url: https://github.com/AdoptOpenJDK/openjdk${VERSION_MAJOR}-binaries/releases/download/jdk${VERSION_MAJOR}u${VERSION_MINOR}-b${VERSION_BUILD}/OpenJDK${VERSION_MAJOR}U-jre_${ARCH}_${PLATFORM}_hotspot_${VERSION_MAJOR}u${VERSION_MINOR}b${VERSION_BUILD}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: jdk${VERSION_MAJOR}u${VERSION_MINOR}-b${VERSION_BUILD}-jre/Contents/Home

  corretto:
    - if_platform: [ linux ]
      if_arch: [ x64, aarch64 ]
      actions:
        - url: https://corretto.aws/downloads/resources/${VERSION}/amazon-corretto-${VERSION}-${PLATFORM}-${ARCH}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: amazon-corretto-${VERSION}-${PLATFORM}-${ARCH}

    - if_platform: [ macosx ]
      if_arch: [ x64, aarch64 ]
      actions:
        - url: https://corretto.aws/downloads/resources/${VERSION}/amazon-corretto-${VERSION}-${PLATFORM}-${ARCH}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: amazon-corretto-${VERSION_MAJOR}.jdk/Contents/Home

  # Maven - package is named "mvn" here to avoid conflicts with the "classic
  # cbdep" package named "maven"
  mvn:
    - actions:
      - url: https://archive.apache.org/dist/maven/maven-${VERSION_MAJOR}/${VERSION}/binaries/apache-maven-${VERSION}-bin.tar.gz
      - unarchive:
          toplevel_dir: apache-maven-${VERSION}

  # GitHub CLI
  gh:
    - if_platform: [linux]
      if_arch: [amd64, arm64]
      actions:
        - url: https://github.com/cli/cli/releases/download/v${VERSION}/gh_${VERSION}_${PLATFORM}_${ARCH}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: gh_${VERSION}_${PLATFORM}_${ARCH}
    # Have to this Windows differently because there's no toplevel dir in the archive
    - if_platform: [windows]
      if_arch: [amd64, arm64]
      actions:
        - url: https://github.com/cli/cli/releases/download/v${VERSION}/gh_${VERSION}_${PLATFORM}_${ARCH}.${PLATFORM_EXT}
        - unarchive:
            no_toplevel_dir:
    # Have to do Mac separately because of the clever capitalization of macOS,
    # and also it's a .zip rather than .tar.gz so PLATFORM_EXT doesn't work
    - if_platform: [macos]
      if_arch: [amd64, arm64]
      actions:
        - url: https://github.com/cli/cli/releases/download/v${VERSION}/gh_${VERSION}_macOS_${ARCH}.zip
        - unarchive:
            toplevel_dir: gh_${VERSION}_macOS_${ARCH}

  # AWS CLI
  awscli:
    - if_platform: [linux]
      if_arch: [x86_64, aarch64]
      actions:
        - url: https://awscli.amazonaws.com/awscli-exe-linux-${ARCH}-${VERSION}.zip
        - unarchive:
            toplevel_dir: aws
            target_dir: awscli-tmp
        - run: |
            "${INSTALL_DIR}/awscli-tmp/install" -i "${INSTALL_DIR}/awscli-${VERSION}" -b "${INSTALL_DIR}/awscli-${VERSION}/bin"
            rm -rf "${INSTALL_DIR}/awscli-tmp"

  # Terraform
  terraform:
    - if_platform: [linux, darwin, windows]
      # windows-arm64 downloads don't exist, but if they ever do, this should work
      if_arch: [amd64, arm64]
      actions:
        - url: https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_${PLATFORM}_${ARCH}.zip
        - unarchive:
            create_toplevel_dir: bin

  # kubectl
  kubectl:
    - if_platform: [linux, darwin, windows]
      if_arch: [amd64, arm64]
      actions:
        - url: https://dl.k8s.io/release/v${VERSION}/bin/${PLATFORM}/${ARCH}/kubectl${PLATFORM_EXE_EXT}
        - raw_binary:

  # Helm
  helm:
    - if_platform: [linux, darwin, windows]
      if_arch: [amd64, arm64]
      actions:
        - url: https://get.helm.sh/helm-v${VERSION}-${PLATFORM}-${ARCH}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: ${PLATFORM}-${ARCH}
            create_toplevel_dir: bin

  # Flux
  flux:
    - if_platform: [linux, darwin, windows]
      if_arch: [amd64, arm64]
      actions:
        - url: https://github.com/fluxcd/flux2/releases/download/v${VERSION}/flux_${VERSION}_${PLATFORM}_${ARCH}.${PLATFORM_EXT}
        - unarchive:
            create_toplevel_dir: bin


  # Python: We use pyenv on Linux and MacOS to support building various
  # versions of Python. On Windows we download the pre-built installers
  # from python.org.
  # For Python >= 3.3, we then create a venv in the specified "install"
  # directory. For Python 2.7.x we instead create a virtualenv.
  # We don't support Python 3.0-3.2.x which didn't have venv.
  # We don't support Python 2.7.x on Windows. Those installers were
  # provided as an MSI so we'd need a different install command here.
  python:
    - if_platform: [linux, macos]
      if_version: ">= 3.3"
      actions:
        - run: |
            git clone https://github.com/pyenv/pyenv.git ${HOME}/.pyenv 2>/dev/null || true
            cd ${HOME}/.pyenv && git pull
            ${HOME}/.pyenv/bin/pyenv install ${VERSION}
          fixed_dir: ${HOME}/.pyenv/versions/${VERSION}
        - run: |
            ${FIXED_DIR}/bin/python -m venv ${INSTALL_DIR}/python${VERSION}

    - if_platform: [linux, macos]
      if_version: ">= 2.7, < 3.0"
      actions:
        - run: |
            git clone https://github.com/pyenv/pyenv.git ${HOME}/.pyenv 2>/dev/null || true
            cd ${HOME}/.pyenv && git pull
            ${HOME}/.pyenv/bin/pyenv install ${VERSION}
            ${FIXED_DIR}/bin/python -m pip install virtualenv
          fixed_dir: ${HOME}/.pyenv/versions/${VERSION}
        - run: |
            ${FIXED_DIR}/bin/python -m virtualenv ${INSTALL_DIR}/python${VERSION}

    - if_platform: [windows]
      if_version: ">= 3.3"
      actions:
        - cbdep: wix
          version: 3.11.1
          install_dir: C:\cbdep-priv
        - url: https://www.python.org/ftp/python/${VERSION}/python-${VERSION}-amd64.exe
        - run: |
            C:\cbdep-priv\wix-3.11.1\dark.exe -x ${TEMP_DIR} ${DL}
            msiexec /qn /a ${TEMP_DIR}\AttachedContainer\core.msi TARGETDIR=${FIXED_DIR}
            msiexec /qn /a ${TEMP_DIR}\AttachedContainer\lib.msi TARGETDIR=${FIXED_DIR}
            msiexec /qn /a ${TEMP_DIR}\AttachedContainer\dev.msi TARGETDIR=${FIXED_DIR}
            msiexec /qn /a ${TEMP_DIR}\AttachedContainer\exe.msi TARGETDIR=${FIXED_DIR}
            del ${FIXED_DIR}\*.msi
            ${FIXED_DIR}\python.exe -E -s -m ensurepip --default-pip
          fixed_dir: C:\cbdep-priv\Python${VERSION}-amd64
        - run: |
            ${FIXED_DIR}\python.exe -m venv ${INSTALL_DIR}\python${VERSION}-amd64

  # Miniforge is an alternative Python distribution based on conda and configured
  # to strictly use conda-forge, rather than Anaconda default channels.
  miniforge3:
    - if_platform: [Linux, MacOSX]
      default_arches:
      actions:
        - url: https://github.com/conda-forge/miniforge/releases/download/${VERSION}/Miniforge3-${VERSION}-${PLATFORM}-${ARCH}.sh
        - run: sh ${DL} -b -f -p ${INSTALL_DIR}/miniforge3-${VERSION}
    - if_platform: [Windows]
      default_arches:
      actions:
        - url: https://github.com/conda-forge/miniforge/releases/download/${VERSION}/Miniforge3-${VERSION}-${PLATFORM}-${ARCH}.exe
        - run: start /wait ${DL} /NoRegistry=1 /S /D=${INSTALL_DIR}\miniforge3-${VERSION}

  # Mambaforge is a variant of Miniforge that include the Mamba tool as a
  # partial replacement for the "conda" command-line utility.
  mambaforge:
    - if_platform: [Linux, MacOSX]
      default_arches:
      actions:
        - url: https://github.com/conda-forge/miniforge/releases/download/${VERSION}/Mambaforge-${VERSION}-${PLATFORM}-${ARCH}.sh
        - run: sh ${DL} -b -f -p ${INSTALL_DIR}/mambaforge-${VERSION}
    - if_platform: [Windows]
      default_arches:
      actions:
        - url: https://github.com/conda-forge/miniforge/releases/download/${VERSION}/Mambaforge-${VERSION}-${PLATFORM}-${ARCH}.exe
        - run: start /wait ${DL} /NoRegistry=1 /S /D=${INSTALL_DIR}\mambaforge-${VERSION}

  # Miniconda is an alternative Python distribution. We support Miniconda3,
  # based on Python 3.
  miniconda3:
    - if_platform: [Linux, MacOSX]
      default_arches:
      actions:
        - url: https://repo.anaconda.com/miniconda/Miniconda3-${VERSION}-${PLATFORM}-${ARCH}.sh
        - run: sh ${DL} -b -f -p ${INSTALL_DIR}/miniconda3-${VERSION}
    - if_platform: [Windows]
      default_arches:
      actions:
        - url: https://repo.anaconda.com/miniconda/Miniconda3-${VERSION}-${PLATFORM}-${ARCH}.exe
        - run: start /wait ${DL} /NoRegistry=1 /S /D=${INSTALL_DIR}\miniconda3-${VERSION}

  miniconda3-py38:
    - if_platform: [Linux, MacOSX]
      default_arches:
      actions:
        - url: https://repo.anaconda.com/miniconda/Miniconda3-py38_${VERSION}-${PLATFORM}-${ARCH}.sh
        - run: sh ${DL} -b -f -p ${INSTALL_DIR}/miniconda3-${VERSION}
    - if_platform: [Windows]
      default_arches:
      actions:
        - url: https://repo.anaconda.com/miniconda/Miniconda3-py38_${VERSION}-${PLATFORM}-${ARCH}.exe
        - run: start /wait ${DL} /NoRegistry=1 /S /D=${INSTALL_DIR}\miniconda3-${VERSION}

  miniconda3-py39:
    - if_platform: [Linux, MacOSX]
      default_arches:
      actions:
        - url: https://repo.anaconda.com/miniconda/Miniconda3-py39_${VERSION}-${PLATFORM}-${ARCH}.sh
        - run: sh ${DL} -b -f -p ${INSTALL_DIR}/miniconda3-${VERSION}
    - if_platform: [Windows]
      default_arches:
      actions:
        - url: https://repo.anaconda.com/miniconda/Miniconda3-py39_${VERSION}-${PLATFORM}-${ARCH}.exe
        - run: start /wait ${DL} /NoRegistry=1 /S /D=${INSTALL_DIR}\miniconda3-${VERSION}

  # And sadly we support miniconda2 for as long as it exists.
  miniconda2:
    - if_platform: [Linux, MacOSX]
      default_arches:
      actions:
        - url: https://repo.anaconda.com/miniconda/Miniconda2-${VERSION}-${PLATFORM}-${ARCH}.sh
        - run: sh ${DL} -b -f -p ${INSTALL_DIR}/miniconda2-${VERSION}
    - if_platform: [Windows]
      default_arches:
      actions:
        - url: https://repo.anaconda.com/miniconda/Miniconda2-${VERSION}-${PLATFORM}-${ARCH}.exe
        - run: start /wait ${DL} /NoRegistry=1 /S /D=${INSTALL_DIR}\miniconda2-${VERSION}

  # uv python-management tool
  uv:
    # UV requires glibc 2.27 on Linux aarch64, which we don't have on our build agents.
    # Fortunately there's a static musl-based variant that works.
    - if_platform: [unknown-linux-gnu]
      if_arch: [aarch64]
      actions:
        - url: https://github.com/astral-sh/uv/releases/download/${VERSION}/uv-${ARCH}-unknown-linux-musl.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: uv-${ARCH}-unknown-linux-musl
            create_toplevel_dir: bin
    - if_platform: [unknown-linux-musl, unknown-linux-gnu, apple-darwin]
      if_arch: [x86_64, aarch64]
      actions:
        - url: https://github.com/astral-sh/uv/releases/download/${VERSION}/uv-${ARCH}-${PLATFORM}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: uv-${ARCH}-${PLATFORM}
            create_toplevel_dir: bin
    - if_platform: [pc-windows-msvc]
      if_arch: [x86_64]
      actions:
        - url: https://github.com/astral-sh/uv/releases/download/${VERSION}/uv-${ARCH}-${PLATFORM}.${PLATFORM_EXT}
        - unarchive:
            create_toplevel_dir: bin

  cmake:
    - if_platform: [linux]
      default_arches:
      actions:
        - url: https://github.com/Kitware/CMake/releases/download/v${VERSION}/cmake-${VERSION}-linux-${ARCH}.tar.gz
        - unarchive:
            toplevel_dir: cmake-${VERSION}-linux-${ARCH}
    - if_platform: [macos]
      default_arches:
      actions:
        - url: https://github.com/Kitware/CMake/releases/download/v${VERSION}/cmake-${VERSION}-macos-universal.tar.gz
        - unarchive:
            toplevel_dir: cmake-${VERSION}-macos-universal/CMake.app/Contents
    - if_platform: [windows]
      if_arch: [x86_64]
      actions:
        - url: https://github.com/Kitware/CMake/releases/download/v${VERSION}/cmake-${VERSION}-windows-${ARCH}.zip
        - unarchive:
            toplevel_dir: cmake-${VERSION}-windows-${ARCH}

  ninja:
    - if_platform: [mac, win]
      actions:
        - url: https://github.com/ninja-build/ninja/releases/download/v${VERSION}/ninja-${PLATFORM}.zip
        - unarchive:
            create_toplevel_dir: bin
    - if_platform: [linux]
      if_arch: [x86_64]
      actions:
        - url: https://github.com/ninja-build/ninja/releases/download/v${VERSION}/ninja-${PLATFORM}.zip
        - unarchive:
            create_toplevel_dir: bin
    - if_platform: [linux]
      if_arch: [aarch64]
      actions:
        - url: https://github.com/ninja-build/ninja/releases/download/v${VERSION}/ninja-${PLATFORM}-${ARCH}.zip
        - unarchive:
            create_toplevel_dir: bin

  wix:
    - if_platform: [windows]
      actions:
        - url: https://github.com/wixtoolset/wix${VERSION_MAJOR}/releases/download/wix${VERSION_MAJOR}${VERSION_MINOR}${VERSION_PATCH}rtm/wix${VERSION_MAJOR}${VERSION_MINOR}-binaries.zip
        - unarchive:

  jq:
    - if_platform: [linux, osx, windows]
      if_arch: [amd64, arm64]
      # Prior to 1.7, jq had erratic filenaming conventions, so only
      # newer versions will work with this template.
      if_version: ">= 1.7"
      actions:
        - url: https://github.com/stedolan/jq/releases/download/jq-${VERSION}/jq-${PLATFORM}-${ARCH}${PLATFORM_EXE_EXT}
        - raw_binary:
            name: jq${PLATFORM_EXE_EXT}

  prometheus:
    - if_platform: [linux, darwin, windows]
      if_arch: [ amd64, arm64 ]
      actions:
        - url: https://github.com/prometheus/prometheus/releases/download/v${VERSION}/prometheus-${VERSION}.${PLATFORM}-${ARCH}.tar.gz
        - unarchive:
            toplevel_dir: prometheus-${VERSION}.${PLATFORM}-${ARCH}

  golang:
    - if_platform: [linux, darwin]
      if_arch: [ amd64, arm64 ]
      actions:
        - url: https://dl.google.com/go/go${VERSION}.${PLATFORM}-${ARCH}.tar.gz
        - unarchive:
            toplevel_dir: go
            target_dir: go${VERSION}

    - if_platform: [linux]
      if_arch: [x64-musl]
      actions:
        - url: https://packages.couchbase.com/couchbase-server/deps/golang/go${VERSION}.${PLATFORM}-${ARCH}.tar.gz
        - unarchive:
            toplevel_dir: go
            target_dir: go${VERSION}

    - if_platform: windows
      if_arch: [ amd64 ]
      actions:
        - url: https://dl.google.com/go/go${VERSION}.windows-${ARCH}.zip
        - unarchive:
            toplevel_dir: go
            target_dir: go${VERSION}

  # .NET Core (SDK and Runtime) - download URLs are the same for all versions
  # on MacOS and Windows. However on Linux, the URLs for .NET Core 1.x are
  # more specific and name explicit Linux distros. Therefore we need three
  # different blocks here per package - one for all versions on Windows/MacOS,
  # one for .NET Core 2.x on "linux", and one for .NET Core 1.x on specific
  # linux distros.
  dotnet-core-sdk:
    - if_platform: [windows]
      actions:
        - url: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-${VERSION}-${PLATFORM}-x64-binaries
          scrape_html: window.location = "(.*)"
        - unarchive:

    - if_platform: [macos]
      if_arch: [x64, arm64]
      actions:
        - url: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-${VERSION}-${PLATFORM}-${ARCH}-binaries
          scrape_html: window.location = "(.*)"
        - unarchive:

    - if_platform: [linux]
      if_arch: [x64-alpine, arm64-alpine, x64, arm64]
      if_version: ">= 2.0"
      actions:
        - url: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-${VERSION}-${PLATFORM}-${ARCH}-binaries
          scrape_html: window.location = "(.*)"
        - unarchive:

    - if_platform: [ubuntu-16.04, ubuntu-14.04, centos, debian]
      if_arch: [x64]
      if_version: ">= 1.0, < 2.0"
      actions:
        - url: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-${VERSION}-linux-${PLATFORM}-x64-binaries
          scrape_html: window.location = "(.*)"
        - unarchive:

  dotnet-core-runtime:
    - if_platform: [windows, macos]
      actions:
        - url: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-${VERSION}-${PLATFORM}-x64-binaries
          scrape_html: window.location = "(.*)"
        - unarchive:

    - if_platform: [linux]
      if_arch: [x64-alpine, arm64-alpine, x64, arm64]
      if_version: ">= 2.0"
      actions:
        - url: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-${VERSION}-${PLATFORM}-${ARCH}-binaries
          scrape_html: window.location = "(.*)"
        - unarchive:

    - if_platform: [ubuntu-16.04, ubuntu-14.04, centos, debian]
      if_arch: [x64]
      if_version: ">= 1.0, < 2.0"
      actions:
        - url: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-${VERSION}-linux-${PLATFORM}-x64-binaries
          scrape_html: window.location = "(.*)"
        - unarchive:

  docker:
    - if_platform: [linux, mac]
      if_arch: [x86_64, aarch64]
      if_version: "< 18.09.0"
      actions:
        - url: https://download.docker.com/${PLATFORM}/static/stable/${ARCH}/docker-${VERSION}-ce.tgz
        - unarchive:
        - run: mv ${INSTALL_DIR}/docker-${VERSION}/docker ${INSTALL_DIR}/docker-${VERSION}/bin

    - if_platform: [linux, mac]
      if_arch: [x86_64, aarch64]
      if_version: ">= 18.09.0"
      actions:
        - url: https://download.docker.com/${PLATFORM}/static/stable/${ARCH}/docker-${VERSION}.tgz
        - unarchive:
        - run: mv ${INSTALL_DIR}/docker-${VERSION}/docker ${INSTALL_DIR}/docker-${VERSION}/bin

  nodejs:
    - if_platform: [linux, darwin, win]
      if_arch: [x86, x64, arm64]
      actions:
        - url: https://nodejs.org/dist/v${VERSION}/node-v${VERSION}-${PLATFORM}-${ARCH}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: node-v${VERSION}-${PLATFORM}-${ARCH}
    - if_platform: [linux]
      if_arch: [x64-musl]
      actions:
        - url: https://unofficial-builds.nodejs.org/download/release/v${VERSION}/node-v${VERSION}-${PLATFORM}-${ARCH}.${PLATFORM_EXT}
        - unarchive:
            toplevel_dir: node-v${VERSION}-${PLATFORM}-${ARCH}

  protoc:
    - if_platform: [linux, osx]
      if_arch: [aarch_64, x86_64]
      actions:
        - url: https://github.com/protocolbuffers/protobuf/releases/download/v${VERSION}/protoc-${VERSION}-${PLATFORM}-${ARCH}.zip
        - unarchive:
    - if_platform: [win]
      actions:
        - url: https://github.com/protocolbuffers/protobuf/releases/download/v${VERSION}/protoc-${VERSION}-win64.zip
        - unarchive:

  protoc-gen-go:
    - if_platform: [linux, darwin, windows]
      if_arch: [amd64, arm64]
      actions:
        - url: https://github.com/protocolbuffers/protobuf-go/releases/download/v${VERSION}/protoc-gen-go.v${VERSION}.${PLATFORM}.${ARCH}.${PLATFORM_EXT}
        - unarchive:
            create_toplevel_dir: bin

  # Older, deprecated "php" combined packages
  php:
    - if_platform: [linux, windows]
      base_url: https://packages.couchbase.com/couchbase-server/deps/php
      actions:
        - url: ${BASE_URL}/${VERSION}/php-${PLATFORM}-x86_64-${VERSION}.tgz
        - unarchive:
            toplevel_dir: php-${VERSION}

  # Newer, separated PHP packages
  php-zts: *php-variant
  php-nts: *php-variant
  php-zts-default: *php-variant
  php-nts-default: *php-variant
  php-zts-igbinary: *php-variant
  php-nts-igbinary: *php-variant

  libcouchbase_vc11:
    - if_platform: [windows]
      if_arch: [x86, amd64]
      base_url: https://packages.couchbase.com/clients/c
      actions:
        - url: ${BASE_URL}/libcouchbase-${VERSION}_${ARCH}_vc11.zip
        - unarchive:
            toplevel_dir: libcouchbase-${VERSION}_${ARCH}_vc11

  libcouchbase_vc14:
    - if_platform: [windows]
      if_arch: [x86, amd64]
      base_url: https://packages.couchbase.com/clients/c
      actions:
        - url: ${BASE_URL}/libcouchbase-${VERSION}_vc14_${ARCH}.zip
        - unarchive:
            toplevel_dir: libcouchbase-${VERSION}_vc14_${ARCH}

  libcouchbase_vc15:
    - if_platform: [windows]
      if_arch: [x86, amd64]
      base_url: https://packages.couchbase.com/clients/c
      actions:
        - url: ${BASE_URL}/libcouchbase-${VERSION}_vc15_${ARCH}.zip
        - unarchive:
            toplevel_dir: libcouchbase-${VERSION}_vc15_${ARCH}

  couchbasemock:
    - if_platform: [linux, windows, macosx]
      if_version: ">=0.0"
      base_url: https://packages.couchbase.com/clients/c
      actions:
        - url: ${BASE_URL}/mock/CouchbaseMock-LATEST.jar

    - if_platform: [linux, windows, macosx]
      base_url: https://packages.couchbase.com/clients/c
      actions:
        - url: ${BASE_URL}/mock/CouchbaseMock-${VERSION}.jar

  # Internal requirement for Server builds.
  analytics-jars:
    - base_url: https://packages.couchbase.com/releases
      actions:
      - url: ${BASE_URL}/${VERSION_MAJORMINORPATCH}/analytics-jars-${VERSION}.tar.gz
      - unarchive:

# Stock descriptor for handling cbdeps packages, along with a list of
# their package names
cbdeps:
  packages:
    - boost
    - breakpad
    - curl
    - double-conversion
    - erlang
    - flatbuffers
    - flex
    - folly
    - gflags
    - glog
    - gperftools
    - grpc
    - icu4c
    - jemalloc
    - json
    - libcouchbase
    - libcxx
    - libevent
    - libsqlite3
    - libstdcxx
    - libuv
    - lz4
    - maven
    - numactl
    - openblas
    - openjdk-rt
    - openssl
    - pcre
    - rocksdb
    - snappy
    - v8
    - zlib

  descriptor:
    - if_platform: [
        amzn2,
        centos6, centos7, centos8,
        debian7, debian8, debian9, debian10,
        linux,
        rhel8,
        suse11, suse12, suse15,
        ubuntu14.04, ubuntu16.04, ubuntu18.04, ubuntu20.04, ubuntu22.04
        macos, macosx,
        windows, windows_msvc2015, windows_msvc2017, windows_msvc2019, windows_msvc2022,
        android
      ]
      default_cbdeps_arches:
      base_url: https://packages.couchbase.com/couchbase-server/deps
      actions:
        - url:
          - ${BASE_URL}/${PACKAGE}/${VERSION}/${PACKAGE}-${PLATFORM}-${ARCH}-${VERSION}.tgz
          - ${BASE_URL}/${PACKAGE}/${VERSION_MAJORMINORPATCH}/${VERSION_BUILD}/${PACKAGE}-${PLATFORM}-${ARCH}-${VERSION}.tgz
        - unarchive:
